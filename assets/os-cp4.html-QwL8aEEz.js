import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,f as t,g as l,o as h}from"./app-gu2odQzq.js";const e={};function k(p,i){return h(),n("div",null,[i[0]||(i[0]=s("h1",{id:"【raymond-os】chapter-4-enable-paging",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#【raymond-os】chapter-4-enable-paging"},[s("span",null,"【Raymond-OS】Chapter 4. Enable Paging")])],-1)),i[1]||(i[1]=s("p",null,"开启分页",-1)),t(" more "),i[2]||(i[2]=l(`<h2 id="一、过程分析" tabindex="-1"><a class="header-anchor" href="#一、过程分析"><span>一、过程分析</span></a></h2><p>启用分页机制分为三步：</p><ul><li>准备好页目录表和页表</li><li>将页表地址写入控制寄存器 cr3</li><li>寄存器 cr0 的 PG 位置 1<br> 通过之前 gdt 表的构建，现在我们对表构建应该不再陌生，虽然表项结构不同，但套路基本是一样的</li></ul><h2 id="二、核心内容" tabindex="-1"><a class="header-anchor" href="#二、核心内容"><span>二、核心内容</span></a></h2><h3 id="_2-1-多级页表" tabindex="-1"><a class="header-anchor" href="#_2-1-多级页表"><span>2.1 多级页表</span></a></h3><h4 id="_2-1-1-一级页表" tabindex="-1"><a class="header-anchor" href="#_2-1-1-一级页表"><span>2.1.1 一级页表</span></a></h4><p>页表即是一种地址映射，在保护模式下字长是 4B，最大可支持 4G 个地址，如果我们以字节为粒度进行映射，那我们的页表就需要 4G 个页表项，每个页表项 4B，这样算下来页表本身就 16GB 大小；另一个极端是，我们以 4GB 为粒度进行映射，那相当于只有一页，所有的地址都是页内偏移，这样页表项就只有 4B。这两个极端显然都不合适，提它们主要为了说明我们需要在二者中间找到一个平衡值，与这个值关联的概念就是页大小。<br> 操作系统分页中的页大小一般为 4KB，即以 4KB 为粒度进行映射，因此页表需要有 4GB/4KB = 1M 个页表项（PTE），所有页表本身的大小可以控制在 1M * 4B = 4MB。这里稍微一提，因为是以 4KB 为粒度进行映射，表示页表项中地址指向的是某个 4KB 数据的起点，所以其地址的低 12 位其实都是 0，而如果默认低 12 位都是 0 的话，那低 12 位就可以作为控制位来做一些别的事情。<br> 所以，在只有一级页表的情况下，寻址的过程为：</p><ul><li>通过段描述符得到一个 32 位的逻辑地址</li><li>逻辑地址高 20 位作为页表索引，2^20 正应对着 1M 个页表项。因为字长是 4B，所以 index*4B 就得到页表项对于页表起始位置的偏移了。</li><li>通过页表项得到对应页的物理地址</li><li>逻辑地址低 12 位作为页内偏移，配合页的物理地址，得到最终的物理地址，2^12 正应对着 4KB 的页大小<br> 整个过程是由页部件完成的，也就是说地址转化是有硬件支持的。</li></ul><h4 id="_2-2-2-二级页表" tabindex="-1"><a class="header-anchor" href="#_2-2-2-二级页表"><span>2.2.2 二级页表</span></a></h4><p>一级页表 4MB，但是它作为入口，在初始化的时候是必须创建的，再加上之后每个进程需要持有自己的页表，所有 4MB 的空间开销不容忽视。解决这个问题的方法就是多级页表，所谓的多级页表就是多层映射，入口处的页表称之为页目录，其存储的页目录项 （PDE）为页表的地址，而其余页表则可以以懒加载的方式在必要时创建，如此便可尽量减少内存开销。<br> 以二级页表为例，我们将之前 1MB 的页表映射项继续拆成两部分：页目录维护 1K 个页表映射，每个页表维护 1K 个地址映射，于是页目录本身大小便可控制在 4KB，而页表则可以在运行时动态创建。在寻址时，32 位地址的高 10 位用于在页目录中定位 PDE，中间 10 位则会在页表中定位 PTE，低 12 位依然作为页内偏移。<br> 更多层级的页表与此类似</p><h4 id="_2-2-3-页表结构" tabindex="-1"><a class="header-anchor" href="#_2-2-3-页表结构"><span>2.2.3 页表结构</span></a></h4><p>PDE 及 PTE 的结构如下，之后我们会按照该接口构建对应的数据</p><table><thead><tr><th>位数</th><th>名称</th><th>页目录项描述</th><th>页表项描述</th></tr></thead><tbody><tr><td>0</td><td>Present</td><td>指示页表是否在内存中。1 表示存在，0 表示不存在。</td><td>指示页是否在内存中。1 表示存在，0 表示不存在。</td></tr><tr><td>1</td><td>Read/Write</td><td>指示页表中的页是否可写。1 表示可读写，0 表示只读。</td><td>指示页是否可写。1 表示可读写，0 表示只读。</td></tr><tr><td>2</td><td>User/Supervisor</td><td>指示页表中的页的访问权限。1 表示用户模式，0 表示超级用户模式。</td><td>指示页的访问权限。1 表示用户模式，0 表示超级用户模式。</td></tr><tr><td>3</td><td>Page-level Write-through</td><td>控制页表的缓存策略。</td><td>控制页的缓存策略。</td></tr><tr><td>4</td><td>Page-level Cache Disable</td><td>控制页表是否被缓存。</td><td>控制页是否被缓存。</td></tr><tr><td>5</td><td>Accessed</td><td>指示页表是否被访问过。由CPU设置，用于页面置换算法。</td><td>指示页是否被访问过。由CPU设置，用于页面置换算法。</td></tr><tr><td>6</td><td>Dirty</td><td>通常未使用。</td><td>指示页是否被写入过。由CPU设置。</td></tr><tr><td>7</td><td>Page Size / Page Attribute Table</td><td>指示页大小。0 表示4KB页，1 表示4MB页。</td><td>用于选择页的缓存属性（如果PAT被启用）。</td></tr><tr><td>8</td><td>Global</td><td>通常未使用。</td><td>指示页是否为全局页。全局页在CR4.PGE=1时不会被刷新。</td></tr><tr><td>9-11</td><td>Available</td><td>供操作系统软件使用。</td><td>供操作系统软件使用。</td></tr><tr><td>12-31</td><td>Page Frame Address</td><td>指向页表的物理地址。仅高20位有效。</td><td>指向物理页的物理地址。仅高20位有效。</td></tr></tbody></table><h3 id="_2-2-创建页表" tabindex="-1"><a class="header-anchor" href="#_2-2-创建页表"><span>2.2 创建页表</span></a></h3><h4 id="_2-2-1-开辟页表目录空间" tabindex="-1"><a class="header-anchor" href="#_2-2-1-开辟页表目录空间"><span>2.2.1 开辟页表目录空间</span></a></h4><p>我们将页目录放在 1MB 处，即保护模式刚刚碰不到的地方，对于 4KB 的空间，循环 4096 次字节清零，以避免脏数据的影响</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PAGE_DIR_TABLE_POS </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x100000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 创建页目录以及页表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setup_page:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 页目录表占据4KB空间，清零之</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ecx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4096</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> esi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clear_page_dir:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [PAGE_DIR_TABLE_POS + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">esi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> esi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .clear_page_dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-创建页目录" tabindex="-1"><a class="header-anchor" href="#_2-2-2-创建页目录"><span>2.2.2 创建页目录</span></a></h4><p>创建目录页，其实就是设计一个 4KB 的内存布局，PDE 目录页项就是一个 4B 的地址，其低 12 位会携带一些控制信息。值得注意的是：</p><ul><li>页目录创建时 Loader 本身也是在线性地址下执行的，开启分页后需要保证 Loader 里的指令地址依然可以正确解析执行。我们将第一个页表地址作为第一个页目录项，此时低 4MB 的虚拟地址其实是和物理地址一样的，这样也就满足了需求。</li><li>4GB 的虚拟内存空间其实包括用户空间和系统空间的，我们把高 1GB 留给操作系统，如上所说，我们的系统跑在低 4MB 的实际地址上，所有我们把高 1GB 的目录映射到低位的实际地址上即可，又因为我们的内核只需要 4MB 以内，所以只需要将高 1GM 的第一页映射到实际的低 4MB 即可</li></ul><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 创建页目录表(PDE)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create_pde:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PAGE_DIR_TABLE_POS</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">							;0x1000为4KB，加上页目录表起始地址便是第一个页表的地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">								;此时eax中即是第一个页表的位置，也是第一个页目录项PDE的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    or</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PG_US_U | PG_RW_W | PG_P	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;如之前所述，低12位被当做控制位，这里通过一些位运行修改控制位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [PAGE_DIR_TABLE_POS], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			;设置第一个页目录项。让低4MB的虚拟地址和实际物理地址一致</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 第768(内核空间的第一个)个页目录项，与第一个相同，这样第一个和768个都指向低端4MB空间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [PAGE_DIR_TABLE_POS + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0xc00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 最后一个表项指向自己，用于访问页目录本身</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    sub</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [PAGE_DIR_TABLE_POS + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4092</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-创建第一个页表" tabindex="-1"><a class="header-anchor" href="#_2-2-3-创建第一个页表"><span>2.2.3 创建第一个页表</span></a></h4><p>第一个页的内容是 loader 需要的，所以我们这里先初始化第一个页。页表项 PTE 的格式也只是 32 位数据，其中低 12 位用于表示业内偏移，高 20 位表示实际物理地址，而我们第一个页的 4MB 是希望映射到真实的低 4MB 地址的，所以数据初始化也就是把从 0 开始，步长为 4KB 的地址填入页表中</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ecx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1024</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ;cx是循环计数器，控制loop，每个页包含1024个页表项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> esi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;esi记录累加值，配合补偿可以得到每次loop所需要的地址值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> edx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PG_US_U | PG_RW_W | PG_P </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;地址从0开始，赋值控制位</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create_pte:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">esi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">edx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> edx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4096</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> ;步长4kb</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> esi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .create_pte</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: import<br> 我们我们只初始化了第一个页表，已经给第 768 个页目录项指定了地址，此时运行我们系统本身是可以的，但后续用户进程加入尽量之后就需要对其余页相关数据进行处理<br> :::</p><h3 id="_2-3-重置-gdt" tabindex="-1"><a class="header-anchor" href="#_2-3-重置-gdt"><span>2.3 重置 gdt</span></a></h3><p>在我们的设计中，我们将系统内核放到高 1GB 的地址空间，gdt 属于内核的一部分，所有这里我们将其地址偏移 3GB 后重新加载</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 保存gdt表内容到gdt_ptr</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">sgdt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [gdt_ptr]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 重新设置gdt描述符， 使虚拟地址指向内核的第一个页表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [gdt_ptr + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]                  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;gdt_ptr是2B+4B的结构，后4B代表地址，这里是取到地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">add</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [gdt_ptr + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0xc0000000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     ;gdt表地址偏移3GB</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0xc0000000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   ;显存段的地址特殊处理一下</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">lgdt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [gdt_ptr]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-开启分页" tabindex="-1"><a class="header-anchor" href="#_2-4-开启分页"><span>2.4 开启分页</span></a></h4><p>当我们创建好页目录及页表后，分页的开启之后流程性的事情</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 页目录基地址寄存器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PAGE_DIR_TABLE_POS</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cr3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 打开分页</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cr0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x80000000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cr0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、相关内容" tabindex="-1"><a class="header-anchor" href="#三、相关内容"><span>三、相关内容</span></a></h2><h3 id="_3-1-获取内存容量" tabindex="-1"><a class="header-anchor" href="#_3-1-获取内存容量"><span>3.1 获取内存容量</span></a></h3><p>系统启动阶段获取内存容量主要靠 BIOS 的 0x15 中断，具体来讲是靠其三个子功能，子功能号放在寄存器EAX或者 AX中</p><ul><li>EAX = 0xE820：遍历主机上的全部内存</li><li>AX = 0xE801：分别检测低 15MB 和 16MB~4GB 内存，最大支持 4GB</li><li>AH = 0x88：最多检测 64MB 内存，若实际内存超出此限制，也会以 64MB 返回<br> BIOS 中断是实模式下的方法，需要在进入保护模式之前调用。</li></ul><p>这里我们只介绍 0xE820。 0xE820 是较为强大的功能，会按内存类型以迭代方式返回布局信息，该信息以地址范围描述符（ARDS, adderss range descriptor structure）的形式返回，每个描述符是如下所示 20 字节的结构</p><table><thead><tr><th>偏移量</th><th>字段名称</th><th>大小（字节）</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>BaseAddrLow</td><td>4</td><td>内存区域的基址低 32 位</td></tr><tr><td>4</td><td>BaseAddrHigh</td><td>4</td><td>内存区域的基址高 32 位</td></tr><tr><td>8</td><td>LengthLow</td><td>4</td><td>内存区域的长度低 32 位，字节为单位</td></tr><tr><td>12</td><td>LengthHigh</td><td>4</td><td>内存区域的长度高 32 位，字节为单位</td></tr><tr><td>16</td><td>Type</td><td>4</td><td>内存区域的类型</td></tr></tbody></table><p>type 字段具体信息如下</p><table><thead><tr><th>Type 值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>可用内存。该内存区域是可用的，操作系统可以使用它来分配给应用程序或内核。</td></tr><tr><td>2</td><td>保留内存。该内存区域是保留的，通常不可用于操作系统或应用程序。这些区域可能用于特定硬件设备或 BIOS。</td></tr><tr><td>3</td><td>ACPI 可重用内存。该内存区域由 ACPI 使用，但在操作系统初始化之后可以被重用。</td></tr><tr><td>4</td><td>保留的 ACPI 内存。该内存区域由 ACPI 使用，但在操作系统初始化之后不可被重用。</td></tr><tr><td>5</td><td>坏内存。该内存区域被标记为损坏，不应由操作系统或应用程序使用。</td></tr></tbody></table><p>具体执行代码如下：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ards_buf </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">times</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 244</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> db</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	;这里是标记一块内存，存放接下来要读取的ards</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ards_nr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">total_memory_bytes </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dd</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">e820_mem_get_loop:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;入参阶段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x0000e820</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	;eax存放的是子功能号，即0xE820</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ecx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					;ecx存放的是描述符字节大小，这里填20</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x15</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						;调用0x15中断</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;异常处理</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;e820的处理过程会更新eflags寄存器的cf位，调用成功则cf=0，失败则cf=1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;jc命令检查标志位，如果失败了调用e820_mem_get_failed</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .e820_mem_get_failed	</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;e820会把数据写到es:di指定的地方，所有这里需要给di更新一个单位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> di</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;计数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    inc</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ards_nr]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;当ebx返回非0时代表仍有数据需要读取</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    cmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jnz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .e820_mem_get_loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;记录数据之后使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [ards_nr]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ards_buf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;清空寄存器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    xor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> edx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">edx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find_max_mem_area:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">20</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    cmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> edx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .next_ards</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> edx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next_ards:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .find_max_mem_area</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .mem_get_ok</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">e820_mem_get_failed:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;f&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;i&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;l&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;e&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;d&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 内存检测失败，不再继续向下执行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-为什么需要分页" tabindex="-1"><a class="header-anchor" href="#_3-2-为什么需要分页"><span>3.2 为什么需要分页</span></a></h3><p>归根接地还是分段内存管理的粒度太粗了，在分段内存管理中，有关地址的保护信息是放在段描述符中，而段描述符是与段绑定的，当我们有内存置换的需求时，被置换的内存必然是需要维护一些额外信息的，所以在分段内存管理中，短描述符与段的绑定关系就决定了内存置换必须以段为单位，但是段作为置换单位来讲，一是大小不固定，不方便管理，更容易产生碎片，二是进程和段的关系不够灵活，段的置换对进程运行的影响更大。<br> 于是，我们需要一种更灵活的方式来管理内存，它的粒度应该更小，以此来减少对进程的影响，它的大小最好固定，以此来简化内存分配、回收的过程，而这就是分页内存管理模式</p>`,43))])}const A=a(e,[["render",k],["__file","os-cp4.html.vue"]]),g=JSON.parse('{"path":"/posts/rd/os/os-cp4.html","title":"【Raymond-OS】Chapter 4. Enable Paging","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-21T00:00:00.000Z","category":["操作系统"],"tag":["主线"],"description":"开启分页","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/os/os-cp4.html"}],["meta",{"property":"og:site_name","content":"山与长生"}],["meta",{"property":"og:title","content":"【Raymond-OS】Chapter 4. Enable Paging"}],["meta",{"property":"og:description","content":"开启分页"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-23T09:11:44.000Z"}],["meta",{"property":"article:tag","content":"主线"}],["meta",{"property":"article:published_time","content":"2025-01-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-23T09:11:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【Raymond-OS】Chapter 4. Enable Paging\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-23T09:11:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[{"level":2,"title":"一、过程分析","slug":"一、过程分析","link":"#一、过程分析","children":[]},{"level":2,"title":"二、核心内容","slug":"二、核心内容","link":"#二、核心内容","children":[{"level":3,"title":"2.1 多级页表","slug":"_2-1-多级页表","link":"#_2-1-多级页表","children":[]},{"level":3,"title":"2.2 创建页表","slug":"_2-2-创建页表","link":"#_2-2-创建页表","children":[]},{"level":3,"title":"2.3 重置 gdt","slug":"_2-3-重置-gdt","link":"#_2-3-重置-gdt","children":[]}]},{"level":2,"title":"三、相关内容","slug":"三、相关内容","link":"#三、相关内容","children":[{"level":3,"title":"3.1 获取内存容量","slug":"_3-1-获取内存容量","link":"#_3-1-获取内存容量","children":[]},{"level":3,"title":"3.2 为什么需要分页","slug":"_3-2-为什么需要分页","link":"#_3-2-为什么需要分页","children":[]}]}],"git":{"createdTime":1737553247000,"updatedTime":1737623504000,"contributors":[{"name":"Raymond","username":"Raymond","email":"suncheng11@meituan.com","commits":2,"url":"https://github.com/Raymond"}]},"readingTime":{"minutes":11.25,"words":3375},"filePathRelative":"posts/rd/os/os-cp4.md","localizedDate":"2025年1月21日","excerpt":"\\n<p>开启分页</p>\\n","autoDesc":true}');export{A as comp,g as data};
