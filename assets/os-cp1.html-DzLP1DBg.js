import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,f as e,g as n,o as d}from"./app-ByHuUQlQ.js";const l={};function r(h,t){return d(),a("div",null,[t[0]||(t[0]=i("h1",{id:"【手写操作系统】chapter1-mbr加载",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#【手写操作系统】chapter1-mbr加载"},[i("span",null,"【手写操作系统】Chapter1：MBR加载")])],-1)),t[1]||(t[1]=i("p",null,"加载MBR并执行",-1)),e(" more "),t[2]||(t[2]=n(`<details class="hint-container details"><summary>本章内容：</summary><p>通过一段代码展示机器从启动到MBR被加载的过程，之后会对其中涉及到的知识点进行介绍，包括：</p><ul><li>相关工具的介绍，包括bochs、dd、nasm编译</li><li>实模式下内存布局及机器启动后的固定流程</li><li>MBR介绍</li><li>实模式下寄存器的介绍</li></ul></details><h2 id="一、代码介绍" tabindex="-1"><a class="header-anchor" href="#一、代码介绍"><span>一、代码介绍</span></a></h2><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;simple_mbr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bits </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">org </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x7c00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;利用10中断打印</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ah</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x0e</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &#39;X&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;死循环阻止程序退出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hang:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hang</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;字节填充</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">times</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 510</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - ($-$$) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">db</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;魔数（扇区签名）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0xAA55</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对代码中一些点进行简介：<br><strong>bits 16</strong><br> 我们知道计算机是从16为逐步发展过来的，出于向前兼容的考虑，后来的32位、64位机器都是可以支持16位的代码运行的，但由于硬件元件的不同，不同字长模式下对硬件的使用方式也不同，而有些逻辑又是编译器通过代码无法判断出需要编译的目标类型，因此我们需要在一段代码开始时显示指定一个字长模式，例如bits 16或bits 32，该标签的作用范围是当前位置到下一个字长模式标签位。如果不显示指定，默认会是bits 16<br><strong>org 0x7c00</strong><br> 该行的作用是告知编译器代码从0x7c00开始编址。在汇编代码的编写时，我们会遇到与地址直接打交道的情况，我们的变量汇编编译器编译成对应的地址，而在启动流程中MBR代码会被固定加载到0x7c00的位置，也就是我们指定的开始编址的地址，如此可以保证我们在代码中使用地址是与实际运行地址时一致的，避免出现一些地址无法对应的情况。<br> 我们的代码中没有对地址的使用，也就是说，把这一行去掉，我们的代码依然可以运行。<br><strong>start</strong><br> 这是汇编的标签，和C之类的高级语言中的标签一样，方便写代码用的。<br><strong>times 510 - ($-$$) db 0;</strong><br> 这句的作用时填充一堆0，其中 $$可获取到代码段开始地址，$ 可以获取到本行的地址，所以这一句的目的就是保证本代码段的前510个字节是实际代码+0填充，配后最后的2字节模式，刚好是512字节，即一个扇区的大小<br><strong>dw 0xAA55</strong><br> MBR的标识，就是一个魔数，和Java的cafebaby作用类似，如果校验不通过则无法被识别。<br> MBR 的魔数其实是 0X55AA，但是 x86 是小端序，所以这里赋值的时候使用的是 0XAA55</p><h2 id="二、相关工具介绍" tabindex="-1"><a class="header-anchor" href="#二、相关工具介绍"><span>二、相关工具介绍</span></a></h2><ul><li>nasm：汇编代码有不同的风格，nasm是其中一种，我们采用的是这种，所以需要nasm编译器将我们的源代码编译成机器码</li><li>dd：帮助我们进行数据复制。我们的学习过程是使用虚拟机+磁盘映像，MBR扇区有位置要求，所以我们需要借助dd工具将我们的代码放到指定位置。win环境下可以找dd的win版本</li><li>bochs：一款虚拟机，是我们主要的运行环境。注意不同版本的有区别。笔者win下用的是2.6.2，mac下用的是2.8，二者使用上有差别。如非特殊指明，文中默认是win环境</li></ul><h2 id="三、实模式下的内存布局及机器启动后的固定流程" tabindex="-1"><a class="header-anchor" href="#三、实模式下的内存布局及机器启动后的固定流程"><span>三、实模式下的内存布局及机器启动后的固定流程</span></a></h2><table><thead><tr><th>Start</th><th>End</th><th>Size</th><th>Desc</th></tr></thead><tbody><tr><td>FFFF0</td><td>FFFFF</td><td>16B</td><td>BIOS入口地址，顶部64KB都是BIOS，此处16B只是强调其入口的作用。此处16字节的内容是跳转指令：jmp f000:e05b</td></tr><tr><td>F0000</td><td>FFFEF</td><td>64KB - 16B</td><td>系统BIOS</td></tr><tr><td>C8000</td><td>EFFFF</td><td>160KB</td><td>映射硬件适配器的ROM或者内存映射式IO</td></tr><tr><td>C0000</td><td>C7FFF</td><td>32KB</td><td>显示适配器BIOS</td></tr><tr><td>B8000</td><td>BFFFF</td><td>32KB</td><td>用于文本模式显示适配器</td></tr><tr><td>B0000</td><td>B7FFF</td><td>32KB</td><td>用于黑白显示适配</td></tr><tr><td>A0000</td><td>AFFFF</td><td>64KB</td><td>用于彩色显示适配</td></tr><tr><td>9FC00</td><td>9FFFF</td><td>1KB</td><td>EBDA（Extended BIOS Data Area）扩展BIOS数据区</td></tr><tr><td>7E00</td><td>9FBFF</td><td>622080B 约 608KB</td><td>可用区域</td></tr><tr><td>7C00</td><td>7DFF</td><td>512B</td><td>MBR被BIOS加载到此处，共512字节</td></tr><tr><td>500</td><td>7BFF</td><td>30464B 约 30KB</td><td>可用区域</td></tr><tr><td>400</td><td>4FF</td><td>256B</td><td>BIOS data area（BIOS数据区）</td></tr><tr><td>000</td><td>3FF</td><td>1KB</td><td>interrupt vector table（中断向量表）</td></tr></tbody></table><p>开机后的固定流程：</p><ol><li>系统加电，CS：IP被固定设置为<code>F000：FFF0</code>，运算后得到的实际执行地址是<code>FFFF0</code>，也就是上述的BIOS入口地址，至此BIOS开始执行。</li><li><code>FFFF0</code>到<code>FFFFF</code>之间的16B只有一条跳转指令：<code>jmp f000:e05b</code>，即跳转到FE05B继续执行，这个阶段可以理解为BIOS内部的执行逻辑。BIOS在执行过程中会执行硬件检查、创建中断向量表之类的事情。</li><li>BIOS执行的最后阶段，它会检查0盘0道1扇区的内容，格式无误后会将其加载到7C00处。格式校验的内容：此扇区末尾的两个字节分别是魔数<code>0x55</code>和<code>0xaa</code></li><li>BIOS执行<code>jmp 0:7C00</code>，相当于正式移交了执行权。注意这里会将CS中的内容由之前的<code>F000</code>变为<code>0000</code><br> 此后可以认为是我们的操作系统开始执行</li></ol><h2 id="四、mbr介绍" tabindex="-1"><a class="header-anchor" href="#四、mbr介绍"><span>四、MBR介绍</span></a></h2><p>我们的操作系统存储在磁盘上，磁盘以扇区为单位存储数据，0盘0道1扇区被称为<code>MBR（master boot record，主引导记录）</code>，该扇区数据特殊且重要，会在机器启动后由硬件设定自动加载到内存参与执行。BIOS对MBR进行格式校验时，会检查最后2字节是否时是魔数，注意MBR魔术是<code>0x55AA</code>，因为X86是小端序，所以下文代码中写的是<code>dw 0xAA55</code></p><div class="hint-container tip"><p class="hint-container-title">关于大端序与小端序</p><p>我们知道一个字节8位，假设我有一个数据0x1234，显然它需要占用两个字节，现在我有两个字节的地址B1和B2，其中B1地址小于B2地址，那么我应该如何存储？数据12放在B1还是B2？</p><p>第一种方式：B1 B2 ：1234，将12放到了B1中，此时12是数据高位，B1是地址低位，这种将高位数据优先放入地址的方式称为大端序（近似理解为大数据优先）<br> 第二种方式：B1 B2 ： 3412，将34放到了B1中，此时34是数据低位，B1是地址低位，这种将数据低位优先放入地址的方式称为小端序（近似理解为小数据优先）</p><p>小端序的优点：强制数据类型转换的时候不需要调整字节了。比如说现在0x1234是我定义的一个对象，它放在B1和B2中，注意对象地址指向的是B1这个地址，此时我对它进行强制类型转化，从2字节变为1字节，那最终对象的地址其实还是B1，而B1中存放的是34，数据上也符合强制类型转化的规则，如果是大端序的话就需要重新调整。<br> 大端序的优点：判断数据符号的时候方便。对于有符号数，符号放在高位中，根据大端序的特点，从对象的地址就可以直接计算出符号位。</p><p>常见大端序：IBM、Sun、PowerPC<br> 常见小端序：X86、DEC</p></div><p>五、实模式下寄存器介绍<br> 寄存器就是硬件层面的全局变量，起初是16位，后来是32位，再后来是64位，当向前兼容时，宽度大的寄存器会通过只使用低位的方式来模拟宽度小的寄存器。目前我们只需要看一下混个眼熟即可</p><table><thead><tr><th>寄存器</th><th>功能</th></tr></thead><tbody><tr><td>AX, BX, CX, DX, DI, SI, BP</td><td>通用寄存器，按你的需要可以放数据、地址等</td></tr><tr><td>IP</td><td>程序计数器，始终指向下一条指令地址</td></tr><tr><td>SP</td><td>栈顶指针</td></tr><tr><td>CS, DS, ES, SS</td><td>段寄存器。16位时代的寻址时段基址偏移+指令地址，段寄存器内存放的就是段基址</td></tr><tr><td>FLAGS</td><td>控制寄存器，里面有复杂的控制位</td></tr></tbody></table>`,15))])}const o=s(l,[["render",r],["__file","os-cp1.html.vue"]]),k=JSON.parse('{"path":"/posts/rd/os/os-cp1.html","title":"【手写操作系统】Chapter1：MBR加载","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-31T00:00:00.000Z","category":["操作系统"],"tag":["主线"],"description":"加载MBR并执行","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/os/os-cp1.html"}],["meta",{"property":"og:site_name","content":"孤独星球漫游"}],["meta",{"property":"og:title","content":"【手写操作系统】Chapter1：MBR加载"}],["meta",{"property":"og:description","content":"加载MBR并执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-01T07:29:39.000Z"}],["meta",{"property":"article:tag","content":"主线"}],["meta",{"property":"article:published_time","content":"2024-12-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-01T07:29:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【手写操作系统】Chapter1：MBR加载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-01T07:29:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[{"level":2,"title":"一、代码介绍","slug":"一、代码介绍","link":"#一、代码介绍","children":[]},{"level":2,"title":"二、相关工具介绍","slug":"二、相关工具介绍","link":"#二、相关工具介绍","children":[]},{"level":2,"title":"三、实模式下的内存布局及机器启动后的固定流程","slug":"三、实模式下的内存布局及机器启动后的固定流程","link":"#三、实模式下的内存布局及机器启动后的固定流程","children":[]},{"level":2,"title":"四、MBR介绍","slug":"四、mbr介绍","link":"#四、mbr介绍","children":[]}],"git":{"createdTime":1735716579000,"updatedTime":1735716579000,"contributors":[{"name":"suncheng11","username":"suncheng11","email":"suncheng11@meituan.com","commits":1,"url":"https://github.com/suncheng11"}]},"readingTime":{"minutes":6.99,"words":2097},"filePathRelative":"posts/rd/os/os-cp1.md","localizedDate":"2024年12月31日","excerpt":"\\n<p>加载MBR并执行</p>\\n","autoDesc":true}');export{o as comp,k as data};
