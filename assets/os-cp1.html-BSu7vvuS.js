import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,f as l,g as t,o as h}from"./app-pa7HclEc.js";const e="/assets/gdt-NcIFygnn.png",k={};function d(p,i){return h(),n("div",null,[i[0]||(i[0]=s("h1",{id:"【手写操作系统】chapter1-第一行c代码的运行",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#【手写操作系统】chapter1-第一行c代码的运行"},[s("span",null,"【手写操作系统】Chapter1：第一行C代码的运行")])],-1)),i[1]||(i[1]=s("p",null,"第一行C代码的运行",-1)),l(" more "),i[2]||(i[2]=t(`<details class="hint-container details"><summary>本章内容：</summary><p>介绍从机器启动到第一行 C 代码被执行的过程，其中包括：</p><ul><li>MBR 的加载</li><li>Loader 的加载</li><li>进入保护模式</li><li>开启分页</li><li>执行 C 代码<br> 本章内容偏底层，较难理解，但大多是固定写法，理解即可</li></ul></details><h2 id="一、mbr-的加载" tabindex="-1"><a class="header-anchor" href="#一、mbr-的加载"><span>一、MBR 的加载</span></a></h2><p>简言之，主板通电后有 32mb 的固定内存布局，BIOS 自动执行自检等逻辑，一切顺利后会对 0 号扇区的内容进行格式校验后加载到地址 0x7c00 处，并将其送上 IP 开始执行，于是，0 号扇区得名主引导扇区 MBR，我们在其中写的代码可以直接被执行。下面看一段代码，用于在屏幕上打印 X</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;simple_mbr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;告知编译器以16位进行编译</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;计算机从16逐渐发展而来，不同位数的系统内寄存器使用方式不一样</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;MBR加载时所处的实模式相当于16位模式，明确使用16位可避免不知名情况</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;如果不显示指定，默认会是bits 16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bits </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;告知编译器编码从0x7c00开始</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;汇编中涉及到很多地址操作，而我们明确得知代码会被加载到0x7c00处，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;此处保持一致也是避免一些地址使用方面的异常情况出现，不过我们的代码中没有这种逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">org </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x7c00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;tag</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;利用10中断打印</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ah</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x0e</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &#39;X&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;死循环阻止程序退出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hang:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hang</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;字节填充，凑够一个扇区的内容，其中$取当前地址，$$取代码段开始地址</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">times</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 510</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - ($-$$) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">db</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;魔数（扇区签名）,和Java的cafebaby一样，用于格式校验</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;MBR 的魔数其实是 0X55AA，但是 x86 是小端序，所以这里赋值的时候使用的是 0XAA55</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0xAA55</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-相关工具介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-相关工具介绍"><span>1.1 相关工具介绍</span></a></h3><ul><li>nasm：汇编代码有不同的风格，nasm是其中一种，我们采用的是这种，所以需要nasm编译器将我们的源代码编译成机器码</li><li>dd：帮助我们进行数据复制。我们的学习过程是使用虚拟机+磁盘映像，MBR扇区有位置要求，所以我们需要借助dd工具将我们的代码放到指定位置。win环境下可以找dd的win版本</li><li>bochs：一款虚拟机，是我们主要的运行环境。注意不同版本的有区别。笔者win下用的是2.6.2，mac下用的是2.8，二者使用上有差别。如非特殊指明，文中默认是win环境</li></ul><h3 id="_1-2-实模式下的内存布局及机器启动后的固定流程" tabindex="-1"><a class="header-anchor" href="#_1-2-实模式下的内存布局及机器启动后的固定流程"><span>1.2 实模式下的内存布局及机器启动后的固定流程</span></a></h3><table><thead><tr><th>Start</th><th>End</th><th>Size</th><th>Description</th></tr></thead><tbody><tr><td>FFFF0</td><td>FFFFF</td><td>16B</td><td>BIOS入口地址，顶部64KB都是BIOS，此处16B只是强调其入口的作用。此处16字节的内容是跳转指令：jmp f000:e05b</td></tr><tr><td>F0000</td><td>FFFEF</td><td>64KB - 16B</td><td>系统BIOS</td></tr><tr><td>C8000</td><td>EFFFF</td><td>160KB</td><td>映射硬件适配器的ROM或者内存映射式IO</td></tr><tr><td>C0000</td><td>C7FFF</td><td>32KB</td><td>显示是配置BIOS</td></tr><tr><td>B8000</td><td>BFFFF</td><td>32KB</td><td>用于文本模式显示适配器</td></tr><tr><td>B0000</td><td>B7FFF</td><td>32KB</td><td>用于黑白显示适配</td></tr><tr><td>A0000</td><td>AFFFF</td><td>64KB</td><td>用于彩色显示适配</td></tr><tr><td>9FC00</td><td>9FFFF</td><td>1KB</td><td>EBDA（Extended BIOS Data Area）扩展BIOS数据区</td></tr><tr><td>07E00</td><td>9FBFF</td><td>622080B 约 608KB</td><td>可用区域</td></tr><tr><td>07C00</td><td>07DFF</td><td>512B</td><td>MBR被BIOS加载到此处，共512字节</td></tr><tr><td>0500</td><td>07BFF</td><td>30464B 约 30KB</td><td>可用区域</td></tr><tr><td>0400</td><td>04FF</td><td>256B</td><td>BIOS data area（BIOS数据区）</td></tr><tr><td>0000</td><td>03FF</td><td>1KB</td><td>interrupt vector table（中断向量表）</td></tr></tbody></table><h3 id="_1-3-开机后的固定流程" tabindex="-1"><a class="header-anchor" href="#_1-3-开机后的固定流程"><span>1.3 开机后的固定流程：</span></a></h3><ol><li>系统加电，CS：IP被固定设置为F000：FFF0，运算后得到的实际执行地址是FFFF0，也就是上述的BIOS入口地址，至此BIOS开始执行。</li><li>FFFF0到FFFFF之间的16B只有一条跳转指令：jmp f000:e05b，即跳转到FE05B继续执行，这个阶段可以理解为BIOS内部的执行逻辑。BIOS在执行过程中会执行硬件检查、创建中断向量表之类的事情。</li><li>BIOS执行的最后阶段，它会检查0盘0道1扇区的内容，格式无误后会将其加载到7C00处。格式校验的内容：此扇区末尾的两个字节分别是魔数0x55和0xaa</li><li>BIOS执行jmp 0:7C00，相当于正式移交了执行权。注意这里会将CS中的内容由之前的F000变为0000<br> 此后可以认为是我们的操作系统开始执行</li></ol><h3 id="_1-4-关于大端序与小端序" tabindex="-1"><a class="header-anchor" href="#_1-4-关于大端序与小端序"><span>1.4 关于大端序与小端序：</span></a></h3><p>我们知道一个字节8位，假设我有一个数据0x1234，显然它需要占用两个字节，现在我有两个字节的地址B1和B2，其中B1地址小于B2地址，那么我应该如何存储？数据12放在B1还是B2？</p><ul><li>第一种方式：B1 B2 ：1234，将12放到了B1中，此时12是数据高位，B1是地址低位，这种将高位数据优先放入地址的方式称为大端序（近似理解为大数据优先）</li><li>第二种方式：B1 B2 ： 3412，将34放到了B1中，此时34是数据低位，B1是地址低位，这种将数据低位优先放入地址的方式称为小端序（近似理解为小数据优先）</li></ul><p>小端序的优点：强制数据类型转换的时候不需要调整字节了。比如说现在0x1234是我定义的一个对象，它放在B1和B2中，注意对象地址指向的是B1这个地址，此时我对它进行强制类型转化，从2字节变为1字节，那最终对象的地址其实还是B1，而B1中存放的是34，数据上也符合强制类型转化的规则，如果是大端序的话就需要重新调整。</p><p>大端序的优点：判断数据符号的时候方便。对于有符号数，符号放在高位中，根据大端序的特点，从对象的地址就可以直接计算出符号位。</p><p>常见大端序：IBM、Sun、PowerPC<br> 常见小端序：X86、DEC</p><h3 id="_1-5-实模式下寄存器介绍" tabindex="-1"><a class="header-anchor" href="#_1-5-实模式下寄存器介绍"><span>1.5 实模式下寄存器介绍</span></a></h3><p>寄存器就是硬件层面的全局变量，起初是16位，后来是32位，再后来是64位，当向前兼容时，宽度大的寄存器会通过只使用低位的方式来模拟宽度小的寄存器。目前我们只需要看一下混个眼熟即可</p><table><thead><tr><th>寄存器</th><th>功能</th></tr></thead><tbody><tr><td>AX\\BX\\CX\\DX\\DI\\SI\\BP</td><td>通用寄存器，按你的需要可以放数据、地址等</td></tr><tr><td>IP</td><td>程序计数器，始终指向下一条指令地址</td></tr><tr><td>SP</td><td>栈顶指针</td></tr><tr><td>CS\\DS\\ES\\SS</td><td>段寄存器。16位时代的寻址时段基址偏移+指令地址，段寄存器内存放的就是段基址</td></tr><tr><td>FLAGS</td><td>控制寄存器，里面有复杂的控制位</td></tr></tbody></table><h2 id="二、loader-加载" tabindex="-1"><a class="header-anchor" href="#二、loader-加载"><span>二、Loader 加载</span></a></h2><p>简言之，MBR 只有 512 字节，放不下操作系统，所以 MBR 一般只当做跳板，我们真正的系统加载逻辑就称为 Loader，MBR 需要将执行权交给 Loader，这其中涉及到磁盘的读取。而读磁盘的操作，包括以一种固定的稍显繁琐的方式将需要读取的数据信息传递给磁盘的寄存器，之后触发读取命令，再之后即时轮询磁盘状态位，当数据准备就绪后即可读入指定地址</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 主引导程序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;-----------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;定义两个常量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LOADER_BASE_ADDR </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LOADER_START_SECTOR </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SECTION MBR vstart=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x7c00</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, LOADER_START_SECTOR</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, LOADER_BASE_ADDR</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rd_disk_m_16</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LOADER_BASE_ADDR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;-----------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 读取磁盘的n个扇区，用于加载loader</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; eax保存从硬盘读取到的数据的保存地址，ebx为起始扇区，cx为读取的扇区数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rd_disk_m_16:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;-----------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> esi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> di</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;读一个扇区 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, LOADER_START_SECTOR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;以LBA方式读取硬盘，分别设置LBA的低中高三部分，对应的端口号分别是0x1f3-0x1f5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    shr</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    shr</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    shr</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x0f</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 只保留4位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    or</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0xe0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 设置驱动器号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f6</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x20</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">not_ready:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    nop</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;                这是一个空操作指令，通常用于在循环中引入延迟或占位。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    in</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">dx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;          从端口dx读取一个字节到al。这里dx应该已经被设置为硬盘状态寄存器的端口号（通常是0x1F7）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x88</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;       对al进行按位与操作，保留al的第4位和第7位。这些位在IDE状态寄存器中通常代表设备忙（BSY）和数据请求（DRQ）状态。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    cmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x08</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;       将al与0x08比较，即检查DRQ位是否设置且BSY位未设置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jnz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .not_ready</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;     如果比较结果不为零（即DRQ未准备好或设备忙），则跳回到.not_ready，继续等待。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">di</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;         将di寄存器的值（通常是扇区数）复制到ax寄存器。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">256</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;        将常数256加载到dx寄存器中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mul</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;             每个扇区512字节，每次读一个字的数据=2字节，需要读取的次数就是512*扇区数/2, 也就是现在的256*扇区数。这个计算结果存储在dx:ax，ax存低位，dx存高位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;         将ax中的低16位结果复制到cx寄存器中，用于后续的循环传输数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x1f0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;      0x1F0加载到dx寄存器中，准备从此端口读取数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go_on_read:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    in</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">dx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;          从dx指向的端口读16位到ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;       将ax数据复制到bx指向的地址，在我们的程序中这个值为LOADER_BASE_ADDR=0x900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;          bx指针移动</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .go_on_read</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;   LOOP指令将CX寄存器的值减1，并检查结果。如果CX不为零，则跳转到标签.go_on_read，继续循环</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    ret</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">times</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 510</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-($-$$) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">db</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0xAA55</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、进入保护模式" tabindex="-1"><a class="header-anchor" href="#三、进入保护模式"><span>三、进入保护模式</span></a></h2><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loader_start:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 打开A20地址线</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    in</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x92</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    or</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00000010B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    out</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x92</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 加载gdt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    lgdt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [gdt_ptr]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; cr0第0位置1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cr0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    or</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00000001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cr0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">eax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 刷新流水线</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dword</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SELECTOR_CODE:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p_mode_start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入保护模式的流程相对固定，其核心代码如上，可见其主要包含四个环节，各环节简述如下：</p><ul><li>开 A20 总线：实模式中地址线有 20 位，上古时代有些大哥会写地址回环的逻辑（地址对 20 位取模），冒然把地址线增加到 32 位会让有些历史逻辑报错，为了兼容就加了个开关，需要打开后才开启 32 位地址线</li><li>加载 GDT：在分页之前，分段地址管理就是最先进的手段，保护模式当年就是以一手分段管理问世，GDT 表就是分段内存管理的配套信息，必须有它，之后会细说</li><li>修改 CR0 标志位：就是修改标记位</li><li>刷新流水线：流水线是 CPU 的一种机制，相当于多指令同时执行，指令是分 16 位译码和 32 位译码的，我们现在需要切换模式了，要确保之前的 16 位指令不会再产生影响，所以需要刷新流水线，而“长跳”是可触发流水线刷新的一种方式。</li></ul><h3 id="_3-1-构建并加载-gdt-表" tabindex="-1"><a class="header-anchor" href="#_3-1-构建并加载-gdt-表"><span>3.1 构建并加载 GDT 表</span></a></h3><p>实模式下的寻址是段寄存器左移 4 位之后与指令地址相加后获取实际物理地址，看似分段但其实没有段信息的维护，无法进行有效管理，于是在保护模式下有了 GDT 表。所谓的 GDT 表，可以理解为一个段描述信息数组，每个段信息固定 64 位，之前段寄存器中的数据会被解析成数组索引，于是在保护模式下，寻址会先通过段寄存器信息获取到段描述符，从描述符中获取段基址，段基址结合指令地址获取到真实地址。<br><img src="`+e+`" alt="gdt" loading="lazy"><br> 短描述符结构如上，由于历史原因，其结构很混乱，段基址、段界限都需要自己拼（CPU 会有对应的缓存机制）。我们之后会开启分页，这里的分段模式只是一个必经的过渡阶段，我们的构建 GDT 表，就是确定几个描述符，也就是指定几个 64 位数据块。<br> 根据约定，GDT 第一个描述符为空以避免歧义，此外我们需要一个数据段、一个代码段，以及我们需要一个显卡段来映射显卡内存。其实我们使用的是平坦模型，也就是实际只使用一个段来映射全部 4G 内存，所以这里定义的段大多是形式上的需要。描述符中各个位置的功能含义如下：</p><table><thead><tr><th>位数范围</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>63-56</td><td>Base Address 31:24</td><td>段基址的高 8 位</td></tr><tr><td>55</td><td>G (Granularity)</td><td>粒度位，0：字节为单位，1：4KB 为单位</td></tr><tr><td>54</td><td>D/B (Default/Big)</td><td>默认操作数大小，0：16 位，1：32 位</td></tr><tr><td>53</td><td>L (64-bit code segment)</td><td>64 位代码段标志，仅在 64 位模式下有效</td></tr><tr><td>52</td><td>AVL</td><td>系统软件可用位，通常未使用</td></tr><tr><td>51-48</td><td>Limit 19:16</td><td>段界限的高 4 位</td></tr><tr><td>47</td><td>P (Present)</td><td>段存在位，0：未存在，1：存在</td></tr><tr><td>46-45</td><td>DPL (Descriptor Privilege Level)</td><td>描述符特权级，0：最高，3：最低</td></tr><tr><td>44</td><td>S (Descriptor type)</td><td>描述符类型，0：系统段，1：代码或数据段</td></tr><tr><td>43-40</td><td>Type</td><td>段类型，对于代码段和数据段有不同的含义</td></tr><tr><td>39-32</td><td>Base Address 23:16</td><td>段基址的中 8 位</td></tr><tr><td>31-16</td><td>Base Address 15:0</td><td>段基址的低 16 位</td></tr><tr><td>15-0</td><td>Segment Limit 15:0</td><td>段界限的低 16 位</td></tr></tbody></table><p>短描述符中，段界限有 20 位，配合 G 标识位将粒度定义为 4KB，刚好可以表示 32 位内存空间，也就是一个段就可以映射到整个 4G 内存，这就是平坦模型的来源</p><h4 id="_3-1-1-定义描述符" tabindex="-1"><a class="header-anchor" href="#_3-1-1-定义描述符"><span>3.1.1 定义描述符</span></a></h4><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 这里其实就是GDT的起始地址，第一个描述符为空</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GDT_BASE:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x00000000</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x00000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码所示，定义描述符真就是字面意思的定义一个 64 位数据块，其余的描述符过程虽然繁琐，但套路是一样的。首先我们需要定义一些常量来帮助我们做二进制的计算</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; gdt描述符属性</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 段描述符高23位，表示段界限的粒度为4KB</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_G_4K </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000000000000000000000b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; D/B为，1表示运行在32位模式下</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_D_32 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000000000000000000000b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 高21位，如果为1表示为64位代码段，目前我们都是在32位模式下操作，故为零</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_L </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0000000000000000000000b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 没有明确的用途，取值随意</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_AVL </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   000000000000000000000b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 第二部分段界限值，由于采用了32位平坦模型，所以段界限为(4GB / 4KB) - 1 = 0xFFFFF，故为全1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_LIMIT_CODE2 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 11110000000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_LIMIT_DATA2 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DESC_LIMIT_CODE2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_LIMIT_VIDEO2 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0000000000000001011b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_P </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_DPL_0 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 000000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_DPL_1 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 010000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_DPL_2 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_DPL_3 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 110000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_S_CODE </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  1000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_S_DATA </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DESC_S_CODE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_S_sys </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0000000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_TYPE_CODE </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000000000b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_TYPE_DATA </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 001000000000b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 代码段描述符的高32位表示，其中(0x00 &lt;&lt; 24表示最高8位的段基址值，由于我们采用的是平坦模型，故基址为零)，后面唯一可变的就是段界限值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_CODE_HIGH4 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) + DESC_G_4K + DESC_D_32 + \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DESC_P + DESC_DPL_0 + DESC_S_CODE + DESC_TYPE_CODE + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_DATA_HIGH4 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) + DESC_G_4K + DESC_D_32 + \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESC_VIDEO_HIGH4 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) + DESC_G_4K + DESC_D_32 + \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DESC_L + DESC_AVL + DESC_LIMIT_VIDEO2 + \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x00</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义的部分就相对简单</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 这里其实就是GDT的起始地址，第一个描述符为空</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GDT_BASE:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x00000000</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x00000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 代码段描述符，一个dd为4字节，段描述符为8字节，上面为低4字节</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CODE_DESC:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x0000FFFF</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">           dd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DESC_CODE_HIGH4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 栈段描述符，和数据段共用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DATA_STACK_DESC:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x0000FFFF</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                 dd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DESC_DATA_HIGH4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; 显卡段，非平坦</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">VIDEO_DESC:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> dd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x80000007</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            dd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DESC_VIDEO_HIGH4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2-加载-gdt-表" tabindex="-1"><a class="header-anchor" href="#_3-1-2-加载-gdt-表"><span>3.1.2 加载 GDT 表</span></a></h4><p>加载 GDT 表需要使用 lgdt命令，它需要GDT_BASE 和 GDT_LIMIT 信息：</p><ul><li>GDT_BASE 是 GDT 在内存中的起始地址。</li><li>GDT_LIMIT 是 GDT 的大小减去 1，表示 GDT 的限制。</li></ul><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">GDT_SIZE </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ - GDT_BASE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">GDT_LIMIT </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">equ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> GDT_SIZE - </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gdt_ptr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> GDT_LIMIT</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        dd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> GDT_BASE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、开启分页" tabindex="-1"><a class="header-anchor" href="#四、开启分页"><span>四、开启分页</span></a></h2><h2 id="五、执行-c-代码" tabindex="-1"><a class="header-anchor" href="#五、执行-c-代码"><span>五、执行 C 代码</span></a></h2>`,42))])}const c=a(k,[["render",d],["__file","os-cp1.html.vue"]]),g=JSON.parse('{"path":"/posts/rd/os/os-cp1.html","title":"【手写操作系统】Chapter1：第一行C代码的运行","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-31T00:00:00.000Z","category":["操作系统"],"tag":["主线"],"description":"第一行C代码的运行","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/os/os-cp1.html"}],["meta",{"property":"og:site_name","content":"孤独星球漫游"}],["meta",{"property":"og:title","content":"【手写操作系统】Chapter1：第一行C代码的运行"}],["meta",{"property":"og:description","content":"第一行C代码的运行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-08T13:55:59.000Z"}],["meta",{"property":"article:tag","content":"主线"}],["meta",{"property":"article:published_time","content":"2024-12-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-08T13:55:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【手写操作系统】Chapter1：第一行C代码的运行\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-08T13:55:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[{"level":2,"title":"一、MBR 的加载","slug":"一、mbr-的加载","link":"#一、mbr-的加载","children":[{"level":3,"title":"1.1  相关工具介绍","slug":"_1-1-相关工具介绍","link":"#_1-1-相关工具介绍","children":[]},{"level":3,"title":"1.2  实模式下的内存布局及机器启动后的固定流程","slug":"_1-2-实模式下的内存布局及机器启动后的固定流程","link":"#_1-2-实模式下的内存布局及机器启动后的固定流程","children":[]},{"level":3,"title":"1.3  开机后的固定流程：","slug":"_1-3-开机后的固定流程","link":"#_1-3-开机后的固定流程","children":[]},{"level":3,"title":"1.4  关于大端序与小端序：","slug":"_1-4-关于大端序与小端序","link":"#_1-4-关于大端序与小端序","children":[]},{"level":3,"title":"1.5  实模式下寄存器介绍","slug":"_1-5-实模式下寄存器介绍","link":"#_1-5-实模式下寄存器介绍","children":[]}]},{"level":2,"title":"二、Loader 加载","slug":"二、loader-加载","link":"#二、loader-加载","children":[]},{"level":2,"title":"三、进入保护模式","slug":"三、进入保护模式","link":"#三、进入保护模式","children":[{"level":3,"title":"3.1 构建并加载 GDT 表","slug":"_3-1-构建并加载-gdt-表","link":"#_3-1-构建并加载-gdt-表","children":[]}]},{"level":2,"title":"四、开启分页","slug":"四、开启分页","link":"#四、开启分页","children":[]},{"level":2,"title":"五、执行 C 代码","slug":"五、执行-c-代码","link":"#五、执行-c-代码","children":[]}],"git":{"createdTime":1735716579000,"updatedTime":1736344559000,"contributors":[{"name":"suncheng11","username":"suncheng11","email":"suncheng11@meituan.com","commits":3,"url":"https://github.com/suncheng11"}]},"readingTime":{"minutes":13.53,"words":4058},"filePathRelative":"posts/rd/os/os-cp1.md","localizedDate":"2024年12月31日","excerpt":"\\n<p>第一行C代码的运行</p>\\n","autoDesc":true}');export{c as comp,g as data};
