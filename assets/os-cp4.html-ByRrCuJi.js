import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,f as n,g as l,o as e}from"./app-BA8MqKdn.js";const h={};function p(k,i){return e(),t("div",null,[i[0]||(i[0]=s("h1",{id:"【raymond-os】chapter-4-enable-paging",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#【raymond-os】chapter-4-enable-paging"},[s("span",null,"【Raymond-OS】Chapter 4. Enable Paging")])],-1)),i[1]||(i[1]=s("p",null,"开启分页",-1)),n(" more "),i[2]||(i[2]=l(`<h2 id="一、过程分析" tabindex="-1"><a class="header-anchor" href="#一、过程分析"><span>一、过程分析</span></a></h2><p>启用分页机制分为三步：</p><ul><li>准备好页目录表和页表</li><li>将页表地址写入控制寄存器 cr3</li><li>寄存器 cr0 的 PG 位置 1<br> 通过之前 gdt 表的构建，现在我们对表构建应该不再陌生，虽然表项结构不同，但套路基本是一样的</li></ul><h2 id="二、核心内容" tabindex="-1"><a class="header-anchor" href="#二、核心内容"><span>二、核心内容</span></a></h2><h2 id="三、相关内容" tabindex="-1"><a class="header-anchor" href="#三、相关内容"><span>三、相关内容</span></a></h2><h3 id="_3-1-获取内存容量" tabindex="-1"><a class="header-anchor" href="#_3-1-获取内存容量"><span>3.1 获取内存容量</span></a></h3><p>系统启动阶段获取内存容量主要靠 BIOS 的 0x15 中断，具体来讲是靠其三个子功能，子功能号放在寄存器EAX或者 AX中</p><ul><li>EAX = 0xE820：遍历主机上的全部内存</li><li>AX = 0xE801：分别检测低 15MB 和 16MB~4GB 内存，最大支持 4GB</li><li>AH = 0x88：最多检测 64MB 内存，若实际内存超出此限制，也会以 64MB 返回<br> BIOS 中断是实模式下的方法，需要在进入保护模式之前调用。</li></ul><p>这里我们只介绍 0xE820。 0xE820 是较为强大的功能，会按内存类型以迭代方式返回布局信息，该信息以地址范围描述符（ARDS, adderss range descriptor structure）的形式返回，每个描述符是如下所示 20 字节的结构</p><table><thead><tr><th>偏移量</th><th>字段名称</th><th>大小（字节）</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>BaseAddrLow</td><td>4</td><td>内存区域的基址低 32 位</td></tr><tr><td>4</td><td>BaseAddrHigh</td><td>4</td><td>内存区域的基址高 32 位</td></tr><tr><td>8</td><td>LengthLow</td><td>4</td><td>内存区域的长度低 32 位，字节为单位</td></tr><tr><td>12</td><td>LengthHigh</td><td>4</td><td>内存区域的长度高 32 位，字节为单位</td></tr><tr><td>16</td><td>Type</td><td>4</td><td>内存区域的类型</td></tr></tbody></table><p>type 字段具体信息如下</p><table><thead><tr><th>Type 值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>可用内存。该内存区域是可用的，操作系统可以使用它来分配给应用程序或内核。</td></tr><tr><td>2</td><td>保留内存。该内存区域是保留的，通常不可用于操作系统或应用程序。这些区域可能用于特定硬件设备或 BIOS。</td></tr><tr><td>3</td><td>ACPI 可重用内存。该内存区域由 ACPI 使用，但在操作系统初始化之后可以被重用。</td></tr><tr><td>4</td><td>保留的 ACPI 内存。该内存区域由 ACPI 使用，但在操作系统初始化之后可以被重用。</td></tr><tr><td>5</td><td>坏内存。该内存区域被标记为损坏，不应由操作系统或应用程序使用。</td></tr></tbody></table><p>具体执行代码如下：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ards_buf </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">times</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 244</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> db</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	;这里是标记一块内存，存放接下来要读取的ards</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ards_nr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">e820_mem_get_loop:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;入参阶段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x0000e820</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	;eax存放的是子功能号，即0xE820</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ecx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					;ecx存放的是描述符字节大小，这里填20</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x15</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						;调用0x15中断</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;异常处理</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;e820的处理过程会更新eflags寄存器的cf位，调用成功则cf=0，失败则cf=1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;jc命令检查标志位，如果失败了调用e820_mem_get_failed</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .e820_mem_get_failed	</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;e820会把数据写到es:di指定的地方，所有这里需要给di更新一个单位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> di</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;计数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    inc</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ards_nr]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;当ebx返回非0时代表仍有数据需要读取</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    cmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jnz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .e820_mem_get_loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;记录数据之后使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [ards_nr]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ebx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ards_buf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;清空寄存器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    xor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> edx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">edx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">e820_mem_get_failed:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;f&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;i&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;l&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;e&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">gs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], &#39;d&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ; 内存检测失败，不再继续向下执行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14))])}const c=a(h,[["render",p],["__file","os-cp4.html.vue"]]),g=JSON.parse('{"path":"/posts/rd/os/os-cp4.html","title":"【Raymond-OS】Chapter 4. Enable Paging","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-21T00:00:00.000Z","category":["操作系统"],"tag":["主线"],"description":"开启分页","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/os/os-cp4.html"}],["meta",{"property":"og:site_name","content":"山与长生"}],["meta",{"property":"og:title","content":"【Raymond-OS】Chapter 4. Enable Paging"}],["meta",{"property":"og:description","content":"开启分页"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-22T13:40:47.000Z"}],["meta",{"property":"article:tag","content":"主线"}],["meta",{"property":"article:published_time","content":"2025-01-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-22T13:40:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【Raymond-OS】Chapter 4. Enable Paging\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-22T13:40:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[{"level":2,"title":"一、过程分析","slug":"一、过程分析","link":"#一、过程分析","children":[]},{"level":2,"title":"二、核心内容","slug":"二、核心内容","link":"#二、核心内容","children":[]},{"level":2,"title":"三、相关内容","slug":"三、相关内容","link":"#三、相关内容","children":[{"level":3,"title":"3.1 获取内存容量","slug":"_3-1-获取内存容量","link":"#_3-1-获取内存容量","children":[]}]}],"git":{"createdTime":1737553247000,"updatedTime":1737553247000,"contributors":[{"name":"Raymond","username":"Raymond","email":"suncheng11@meituan.com","commits":1,"url":"https://github.com/Raymond"}]},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"posts/rd/os/os-cp4.md","localizedDate":"2025年1月21日","excerpt":"\\n<p>开启分页</p>\\n","autoDesc":true}');export{c as comp,g as data};
