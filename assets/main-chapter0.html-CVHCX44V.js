import{_ as a}from"./mybatis整体运行-Bx2a_Ifa.js";import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,f as e,g as l,o as h}from"./app-B9qCL3ul.js";const p={};function k(r,s){return h(),n("div",null,[s[0]||(s[0]=i("h1",{id:"【主线】实现mybatis-chapter0-介绍",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#【主线】实现mybatis-chapter0-介绍"},[i("span",null,"【主线】实现MyBatis：Chapter0: 介绍")])],-1)),e(" more "),s[1]||(s[1]=l(`<p>MyBatis 是一个流行的 ORM 框架，广泛应用于 Java 项目中对数据库的访问，从使用者角度看，它最直观的特点就是实现了接口到 SQL 的绑定，让我们能够以访问 Java 接口的方式操作数据库，此外，它还具有配置方式灵活、动态 SQL 功能丰富、数据缓存以及插件等各种功能。<br> “造轮子”不是好的工作方式，但却是一个极好的学习方法，所有，这次我们就以造轮子的方式来进行对 MyBatis 的学习，目标是在保持架构基本一致的前提下实现其核心的增删改查及插件功能</p><p>首先来看一段最简单的 MyBatis 使用的代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //step1：获取session工厂</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SqlSessionFactory</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sqlSessionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SqlSessionFactoryBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResourceAsReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;batis-config.xml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //step2：获取session</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SqlSession</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sqlSession</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sqlSessionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">openSession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //step3：获取mapper接口代理</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        CountryMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sqlSession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CountryMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //step4：执行接口方法</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Country</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">countries</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码大致可以分为四个部分：</p><ol><li>获取 session 工厂</li><li>通过 session 工厂获取 session 对象</li><li>通过 session 对象获取 mapper 代理</li><li>通过 mapper 代理执行接口方法<br> 上述四个步骤中，获取 session 对象这一步概念到实现上都相对简单，而其余的三步则分别对应了 MyBatis 核心的三块：配置解析、接口代理以及 逻辑执行</li></ol><figure><img src="`+a+'" alt="mybatis整体运行流程" tabindex="0" loading="lazy"><figcaption>mybatis整体运行流程</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MyBatis 的设计思路是在解析阶段将所有信息构成一个 Configuration 对象，把该对象作为 session 工厂的属性之一，同一工厂实例下生产是 session 都共享同一个配置对象。该配置对象层层传递，在解析、执行的各个阶段都发挥重要作用。</p></div><p>接下来我们将一步步实现 MyBatis 的核心功能</p>',8))])}const c=t(p,[["render",k],["__file","main-chapter0.html.vue"]]),g=JSON.parse('{"path":"/posts/rd/mybatis/main-chapter0.html","title":"【主线】实现MyBatis：Chapter0: 介绍","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-21T00:00:00.000Z","category":["MyBatis"],"tag":["主线"],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/mybatis/main-chapter0.html"}],["meta",{"property":"og:site_name","content":"孤独星球漫游"}],["meta",{"property":"og:title","content":"【主线】实现MyBatis：Chapter0: 介绍"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-31T06:18:03.000Z"}],["meta",{"property":"article:tag","content":"主线"}],["meta",{"property":"article:published_time","content":"2024-12-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-31T06:18:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【主线】实现MyBatis：Chapter0: 介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-31T06:18:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[],"git":{"createdTime":1734776833000,"updatedTime":1735625883000,"contributors":[{"name":"suncheng11","username":"suncheng11","email":"suncheng11@meituan.com","commits":4,"url":"https://github.com/suncheng11"}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"posts/rd/mybatis/main-chapter0.md","localizedDate":"2024年12月21日","excerpt":"\\n"}');export{c as comp,g as data};
