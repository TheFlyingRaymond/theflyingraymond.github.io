import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,f as l,g as e,o as p}from"./app-BVHInSby.js";const t="/assets/jmm-BETcoVC-.png",h="/assets/mesa-DeeO9-_V.png",d="/assets/thread-status-trans-D5chQbj1.png",r="/assets/thread-status-synchronized-DvWrjyIR.png",k="/assets/thread-status-lock-vioACkyb.png",c="/assets/thread-status-other-D84vl3T6.png",o={};function v(A,s){return p(),n("div",null,[s[0]||(s[0]=i("h1",{id:"java多线程总结-二-java理论基础",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#java多线程总结-二-java理论基础"},[i("span",null,"Java多线程总结（二）：Java理论基础")])],-1)),l(" more "),s[1]||(s[1]=e('<h2 id="一、jmm" tabindex="-1"><a class="header-anchor" href="#一、jmm"><span>一、JMM</span></a></h2><p>不同的操作系统会内存屏障相关的支持和提供的api不同，Java作为跨平台的语言，它提供了JMM的抽象来屏蔽这些差异<br><img src="'+t+`" alt="JMM" loading="lazy"></p><p>结合load与store操作，JVM提供了四种内存屏障</p><table><thead><tr><th>屏障类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad</td><td>Load1；LoadLoad；Load2</td><td>确保load2访问数据前先加载load1的数据</td></tr><tr><td>LoadStore</td><td>Load；LoadStore；Store</td><td>确保store访问数据前先加载load的数据</td></tr><tr><td>StoreStore</td><td>Store1；StoreStore；Store2</td><td>确保store2在store1之后完成</td></tr><tr><td>StoreLoad</td><td>Store；StoreLoad；Load</td><td>确保load在store完成后进行</td></tr></tbody></table><p>OrderAccess中定义了内存屏障</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class OrderAccess : AllStatic {</span></span>
<span class="line"><span> public:</span></span>
<span class="line"><span>  static void     loadload();</span></span>
<span class="line"><span>  static void     storestore();</span></span>
<span class="line"><span>  static void     loadstore();</span></span>
<span class="line"><span>  static void     storeload();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  static void     acquire();</span></span>
<span class="line"><span>  static void     release();</span></span>
<span class="line"><span>  static void     fence();</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>  ......</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为JVM需要支持跨平台，所有针对不同系统提供了不同实现，以X86架构下的Linux为例(不同版本JDK可能也不同)：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>inline void OrderAccess::loadload()   { acquire(); }</span></span>
<span class="line"><span>inline void OrderAccess::storestore() { release(); }</span></span>
<span class="line"><span>inline void OrderAccess::loadstore()  { acquire(); }</span></span>
<span class="line"><span>inline void OrderAccess::storeload()  { fence(); }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>inline void OrderAccess::acquire() {</span></span>
<span class="line"><span>  volatile intptr_t local_dummy;</span></span>
<span class="line"><span>#ifdef AMD64</span></span>
<span class="line"><span>  __asm__ volatile (&quot;movq 0(%%rsp), %0&quot; : &quot;=r&quot; (local_dummy) : : &quot;memory&quot;);</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>  __asm__ volatile (&quot;movl 0(%%esp),%0&quot; : &quot;=r&quot; (local_dummy) : : &quot;memory&quot;);</span></span>
<span class="line"><span>#endif // AMD64</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>inline void OrderAccess::release() {</span></span>
<span class="line"><span>  // 我怀疑这里是利用cpp的volatile机制</span></span>
<span class="line"><span>  volatile jint local_dummy = 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>inline void OrderAccess::fence() {</span></span>
<span class="line"><span>  if (os::is_MP()) {</span></span>
<span class="line"><span>    // always use locked addl since mfence is sometimes expensive</span></span>
<span class="line"><span>#ifdef AMD64</span></span>
<span class="line"><span>    __asm__ volatile (&quot;lock; addl $0,0(%%rsp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>    __asm__ volatile (&quot;lock; addl $0,0(%%esp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见除了storeload之外都是使用memory提醒编译器重新加载内存，而storeload则是使用了lock</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// (java 9) hotspot/src/os_cpu/linux_x86/vm/orderAccess_linux_x86.inline.hpp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions</span></span>
<span class="line"><span>static inline void compiler_barrier() {</span></span>
<span class="line"><span>  __asm__ volatile (&quot;&quot; : : : &quot;memory&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>inline void OrderAccess::loadload()   { compiler_barrier(); }</span></span>
<span class="line"><span>inline void OrderAccess::storestore() { compiler_barrier(); }</span></span>
<span class="line"><span>inline void OrderAccess::loadstore()  { compiler_barrier(); }</span></span>
<span class="line"><span>inline void OrderAccess::storeload()  { fence();            }</span></span>
<span class="line"><span>inline void OrderAccess::acquire()    { compiler_barrier(); }</span></span>
<span class="line"><span>inline void OrderAccess::release()    { compiler_barrier(); }</span></span>
<span class="line"><span>inline void OrderAccess::fence() {</span></span>
<span class="line"><span>  if (os::is_MP()) {</span></span>
<span class="line"><span>    // always use locked addl since mfence is sometimes expensive</span></span>
<span class="line"><span>#ifdef AMD64</span></span>
<span class="line"><span>    __asm__ volatile (&quot;lock; addl $0,0(%%rsp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>    __asm__ volatile (&quot;lock; addl $0,0(%%esp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  compiler_barrier();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-happens-before原则" tabindex="-1"><a class="header-anchor" href="#_1-1-happens-before原则"><span>1.1 Happens-before原则</span></a></h3><p>● 程序顺序原则：在一个线程中，执行顺序按照程序语义顺序（无依赖关系的可以被乱序优化）<br> ● 传递性原则：A-&gt;B, B-&gt;C ==&gt; A-&gt;C<br> ● volatile原则：对volatile变量的写操作与其后续的读操作遵循happens-before原则，即该写操作对后续读可见<br> ● 监视器锁原则：synchronized原则，解锁操作happens-before后续加锁操作<br> ● start原则：在start方法启动线程时，父线程的变更对子线程是可见的<br> ● join原则：A线程等待B线程，当B线程结束时，其修改对于A线程是可见的<br> ● interrupt原则：对线程interrupt的调用happens-before该线程的中断检测<br> ● finalize原则：一个对象的初始化完成happens-before该对象的finalize方法</p><h2 id="二、管程" tabindex="-1"><a class="header-anchor" href="#二、管程"><span>二、管程</span></a></h2><h3 id="_2-1-mesa管程模型" tabindex="-1"><a class="header-anchor" href="#_2-1-mesa管程模型"><span>2.1 MESA管程模型</span></a></h3><p>一般来讲，操作系统会提供互斥量和信号量的同步机制，但是用起来不太方便，于是就有了“管程”这一封装（一般由编程语言提供）。管程指的就是管理共享变量和对共享变量的操作，让它们支持并发。<br> Java的并发编程参考了MESA管程模型。关于MESA管程模型需要注意的点：<br> ● 同一时刻只允许一个线程进入管程内部对共享变量进行操作<br> ● 有一个入口等待队列，没有获取到入口权限的线程会在入口等待队列中等待<br> ● 管程内部有多个等待条件，当线程在条件变量上等待时，会进入该变量对应的条件等待队列，同时释放掉入口锁权限<br> ○ 条件变量也是由管程管理的，在Java中，synchronized的条件变量就是入口锁对象，Lock的条件变量需要通过Lock创建<br> ● 当条件等待队列中的线程被唤醒时，它需要重新获取入口权限（可能重新进入等待队列）<br> ○ 在线程重新获取到入口权限，来到之前的上下文继续执行时，对应的条件变量可能又再次不满足了，所以Java并发编程里常见while（条件判断）的样式<br> ● 当线程离开管程时也会释放入口锁<br><img src="`+h+`" alt="MESA" loading="lazy"></p><h3 id="_2-2-java对应的管程模型" tabindex="-1"><a class="header-anchor" href="#_2-2-java对应的管程模型"><span>2.2 Java对应的管程模型</span></a></h3><p>synchronized是简化的MESA模型，它只有一个等待队列，而且它的条件变量默认就是入口锁对象，所有我们在synchronized块中可以执行notify、wait，如果在synchronized块之外调用这些方法，则会抛出管程状态异常的错误，结合前述可以得知这是因为用法不符合管程规范</p><p>Lock对应的是相对完整的MESA模型，它支持了多个条件变量，但需要手动指定</p><p>可以通过一个简版的阻塞队列体会Java中管程的执行过程</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyBlockingQueue</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> capacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> capacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">capacity</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> capacity;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //获取入口锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> take</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //这里针对的就是从【条件满足被唤醒】到【重新获取锁并来到之前的上下文】这段期间条件变量发生了变化</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;take wait, size:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        T</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ret</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //这里其实有两个条件：full和empty，但是这两个条件互斥，所以在该代码里了一个</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //这里等于nofity-full</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        notifyAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ret;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> capacity) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;put wait, size:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(t);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        notifyAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-从mesa管程角度理解java线程状态流转" tabindex="-1"><a class="header-anchor" href="#_2-3-从mesa管程角度理解java线程状态流转"><span>2.3 从MESA管程角度理解Java线程状态流转</span></a></h3><figure><img src="`+d+'" alt="线程状态流转" tabindex="0" loading="lazy"><figcaption>线程状态流转</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们尝试用管程状态解释Java线程状态变更。上图其实包含三套机制：synchronized机制、Lock机制以及其它</p></div><h4 id="_2-3-1-synchronized的线程状态流转" tabindex="-1"><a class="header-anchor" href="#_2-3-1-synchronized的线程状态流转"><span>2.3.1 synchronized的线程状态流转</span></a></h4><p><img src="'+r+'" alt="synchronized线程状态流转" loading="lazy"><br> 易于理解，处在入口等待队列中的状态为blocked，处在条件等待队列中的状态为wait状态，当线程从条件等待队列中被唤醒使，重新回到runnable状态，在入口开始下一轮的入口权限争夺</p><h4 id="_2-3-2-lock机制的线程状态流转" tabindex="-1"><a class="header-anchor" href="#_2-3-2-lock机制的线程状态流转"><span>2.3.2 Lock机制的线程状态流转</span></a></h4><p>需要注意的是，Lock机制中用AQS的等待队列代替的入口队列，所以在这套机制下没有blocked状态。查看Lock的lock方法和Condition的await方法，发现它们都是调用了LockSupport.park，区别在于入参的对象不同<br><img src="'+k+'" alt="LOCK线程状态流转" loading="lazy"></p><h4 id="_2-3-3-其它" tabindex="-1"><a class="header-anchor" href="#_2-3-3-其它"><span>2.3.3 其它</span></a></h4><p><img src="'+c+`" alt="其它线程状态流转" loading="lazy"><br> 最后还有join和sleep方法会让线程进入wait状态</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> join</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> millis)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> base </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> now </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (millis </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IllegalArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;timeout value is negative&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (millis </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAlive</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            wait</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAlive</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> delay </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> millis </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (delay </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            wait</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(delay)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            now </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，join方法显示获取了对应线程的对象锁，之后会调用wait方法进入条件等待队列，需要注意的是，线程在执行结束后会自动执行notifyall方法。至于sleep，这个比较特殊，记住就行，sleep会进入超时等待状态，而且不会释放锁</p>`,31))])}const m=a(o,[["render",v],["__file","java-concurrent-2.html.vue"]]),u=JSON.parse('{"path":"/posts/rd/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/java-concurrent-2.html","title":"Java多线程总结（二）：Java理论基础","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-21T00:00:00.000Z","category":["计算机"],"tag":["Java"],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/java-concurrent-2.html"}],["meta",{"property":"og:site_name","content":"阿成的春天和我的太阳"}],["meta",{"property":"og:title","content":"Java多线程总结（二）：Java理论基础"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T07:41:10.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-12-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-22T07:41:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java多线程总结（二）：Java理论基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-22T07:41:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[{"level":2,"title":"一、JMM","slug":"一、jmm","link":"#一、jmm","children":[{"level":3,"title":"1.1 Happens-before原则","slug":"_1-1-happens-before原则","link":"#_1-1-happens-before原则","children":[]}]},{"level":2,"title":"二、管程","slug":"二、管程","link":"#二、管程","children":[{"level":3,"title":"2.1 MESA管程模型","slug":"_2-1-mesa管程模型","link":"#_2-1-mesa管程模型","children":[]},{"level":3,"title":"2.2 Java对应的管程模型","slug":"_2-2-java对应的管程模型","link":"#_2-2-java对应的管程模型","children":[]},{"level":3,"title":"2.3 从MESA管程角度理解Java线程状态流转","slug":"_2-3-从mesa管程角度理解java线程状态流转","link":"#_2-3-从mesa管程角度理解java线程状态流转","children":[]}]}],"git":{"createdTime":1734845416000,"updatedTime":1734853270000,"contributors":[{"name":"suncheng11","username":"suncheng11","email":"suncheng11@meituan.com","commits":2,"url":"https://github.com/suncheng11"}]},"readingTime":{"minutes":5.97,"words":1790},"filePathRelative":"posts/rd/java/多线程/java-concurrent-2.md","localizedDate":"2024年12月21日","excerpt":"\\n"}');export{m as comp,u as data};
