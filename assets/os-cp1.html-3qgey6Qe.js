import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,f as n,g as l,o as e}from"./app-gu2odQzq.js";const d={};function h(r,i){return e(),a("div",null,[i[0]||(i[0]=s("h1",{id:"【raymond-os】chapter-1-mbr的加载",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#【raymond-os】chapter-1-mbr的加载"},[s("span",null,"【Raymond-OS】Chapter 1. MBR的加载")])],-1)),i[1]||(i[1]=s("p",null,"MBR的加载",-1)),n(" more "),i[2]||(i[2]=l(`<div class="hint-container info"><p class="hint-container-title">主要内容</p><p>简言之，主板通电后有 1MB 的固定内存布局，BIOS 自动执行自检等逻辑，一切顺利后会对 0 号扇区的内容进行格式校验后加载到地址 0x7c00 处，并将其送上 IP 开始执行，于是，0 号扇区得名主引导扇区 MBR，我们在其中写的代码可以直接被执行。</p></div><h2 id="一、过程分析" tabindex="-1"><a class="header-anchor" href="#一、过程分析"><span>一、过程分析</span></a></h2><p>在开机启动阶段，系统做的内容是一些软硬件相互配合的固定动作：</p><ol><li>系统加电，CS：IP被固定设置为F000：FFF0，运算后得到的实际执行地址是FFFF0，也就是上述的BIOS入口地址，至此BIOS开始执行。</li><li>FFFF0到FFFFF之间的16B只有一条跳转指令：jmp f000:e05b，即跳转到FE05B继续执行，这个阶段可以理解为BIOS内部的执行逻辑。BIOS在执行过程中会执行硬件检查、创建中断向量表之类的事情。</li><li>BIOS执行的最后阶段，它会检查0盘0道1扇区的内容，格式无误后会将其加载到7C00处。格式校验的内容：此扇区末尾的两个字节分别是魔数0x55和0xaa</li><li>BIOS执行jmp 0:7C00，相当于正式移交了执行权。注意这里会将CS中的内容由之前的F000变为0000<br> 此后可以认为是我们的操作系统开始执行</li></ol><h2 id="二、核心代码" tabindex="-1"><a class="header-anchor" href="#二、核心代码"><span>二、核心代码</span></a></h2><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;simple_mbr</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;告知编译器以16位进行编译</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;计算机从16逐渐发展而来，不同位数的系统内寄存器使用方式不一样</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;MBR加载时所处的实模式相当于16位模式，明确使用16位可避免不知名情况</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;如果不显示指定，默认会是bits 16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bits </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;告知编译器编码从0x7c00开始</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;汇编中涉及到很多地址操作，而我们明确得知代码会被加载到0x7c00处，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;此处保持一致也是避免一些地址使用方面的异常情况出现，不过我们的代码中没有这种逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">org </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x7c00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;tag</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;利用10中断打印</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ah</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x0e</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &#39;X&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;死循环阻止程序退出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hang:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    jmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hang</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;字节填充，凑够一个扇区的内容，其中$取当前地址，$$取代码段开始地址</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">times</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 510</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - ($-$$) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">db</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;魔数（扇区签名）,和Java的cafebaby一样，用于格式校验</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;MBR 的魔数其实是 0X55AA，但是 x86 是小端序，所以这里赋值的时候使用的是 0XAA55</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0xAA55</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、相关内容" tabindex="-1"><a class="header-anchor" href="#三、相关内容"><span>三、相关内容</span></a></h2><h3 id="_3-1-相关工具介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-相关工具介绍"><span>3.1 相关工具介绍</span></a></h3><ul><li>nasm：汇编代码有不同的风格，nasm是其中一种，我们采用的是这种，所以需要nasm编译器将我们的源代码编译成机器码</li><li>dd：帮助我们进行数据复制。我们的学习过程是使用虚拟机+磁盘映像，MBR扇区有位置要求，所以我们需要借助dd工具将我们的代码放到指定位置。win环境下可以找dd的win版本</li><li>bochs：一款虚拟机，是我们主要的运行环境。注意不同版本的有区别。笔者win下用的是2.6.2，mac下用的是2.8，二者使用上有差别。</li></ul><h3 id="_3-2-实模式下的内存布局及机器启动后的固定流程" tabindex="-1"><a class="header-anchor" href="#_3-2-实模式下的内存布局及机器启动后的固定流程"><span>3.2 实模式下的内存布局及机器启动后的固定流程</span></a></h3><table><thead><tr><th>起始地址</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>0x00000</td><td>1KB</td><td>BIOS的中断向量表</td></tr><tr><td>0x00400</td><td>256B</td><td>BIOS数据区</td></tr><tr><td>0x00500</td><td>29KB+768B</td><td>可用区域</td></tr><tr><td>0x07C00</td><td>512B</td><td>引导扇区数据，被BIOS加载到此处</td></tr><tr><td>0x07E00</td><td>607KB+512B</td><td>可用区域</td></tr><tr><td>0x9FC00</td><td>1KB</td><td>扩展BIOS数据区</td></tr><tr><td>0xA0000</td><td>64KB</td><td>彩色显示适配器缓存</td></tr><tr><td>0xB0000</td><td>32KB</td><td>黑白显示适配器缓存</td></tr><tr><td>0xB8000</td><td>32KB</td><td>文本模式显示适配器缓存</td></tr><tr><td>0xC0000</td><td>32KB</td><td>显示适配器BIOS</td></tr><tr><td>0xC8000</td><td>160KB</td><td>映射硬件适配器ROM或内存映射式的IO</td></tr><tr><td>0xF0000</td><td>64KB</td><td>BIOS程序，入口地址在0xFFFF0</td></tr></tbody></table><h3 id="_3-3-关于大端序与小端序" tabindex="-1"><a class="header-anchor" href="#_3-3-关于大端序与小端序"><span>3.3 关于大端序与小端序：</span></a></h3><p>我们知道一个字节8位，假设我有一个数据0x1234，显然它需要占用两个字节，现在我有两个字节的地址B1和B2，其中B1地址小于B2地址，那么我应该如何存储？数据12放在B1还是B2？<br> 第一种方式：B1 B2 ：1234，将12放到了B1中，此时12是数据高位，B1是地址低位，这种将高位数据优先放入地址的方式称为大端序（近似理解为大数据优先）<br> 第二种方式：B1 B2 ： 3412，将34放到了B1中，此时34是数据低位，B1是地址低位，这种将数据低位优先放入地址的方式称为小端序（近似理解为小数据优先）<br> 小端序的优点：强制数据类型转换的时候不需要调整字节了。比如说现在0x1234是我定义的一个对象，它放在B1和B2中，注意对象地址指向的是B1这个地址，此时我对它进行强制类型转化，从2字节变为1字节，那最终对象的地址其实还是B1，而B1中存放的是34，数据上也符合强制类型转化的规则，如果是大端序的话就需要重新调整。<br> 大端序的优点：判断数据符号的时候方便。对于有符号数，符号放在高位中，根据大端序的特点，从对象的地址就可以直接计算出符号位。<br> 常见大端序：IBM、Sun、PowerPC<br> 常见小端序：X86、DEC</p><h3 id="_3-4-实模式下寄存器介绍" tabindex="-1"><a class="header-anchor" href="#_3-4-实模式下寄存器介绍"><span>3.4 实模式下寄存器介绍</span></a></h3><p>寄存器就是硬件层面的全局变量，起初是16位，后来是32位，再后来是64位，当向前兼容时，宽度大的寄存器会通过只使用低位的方式来模拟宽度小的寄存器。目前我们只需要看一下混个眼熟即可</p><table><thead><tr><th>寄存器</th><th>功能</th></tr></thead><tbody><tr><td>AX, BX, CX, DX, DI, SI, BP</td><td>通用寄存器，按你的需要可以放数据、地址等</td></tr><tr><td>IP</td><td>程序计数器，始终指向下一条指令地址</td></tr><tr><td>SP</td><td>栈顶指针</td></tr><tr><td>CS, DS, ES, SS</td><td>段寄存器。16位时代的寻址时段基址偏移+指令地址，段寄存器内存放的就是段基址</td></tr><tr><td>FLAGS</td><td>控制寄存器，里面有复杂的控制位</td></tr></tbody></table>`,16))])}const c=t(d,[["render",h],["__file","os-cp1.html.vue"]]),o=JSON.parse('{"path":"/posts/rd/os/os-cp1.html","title":"【Raymond-OS】Chapter 1. MBR的加载","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-20T00:00:00.000Z","category":["操作系统"],"tag":["主线"],"description":"MBR的加载","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/rd/os/os-cp1.html"}],["meta",{"property":"og:site_name","content":"山与长生"}],["meta",{"property":"og:title","content":"【Raymond-OS】Chapter 1. MBR的加载"}],["meta",{"property":"og:description","content":"MBR的加载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-20T15:35:30.000Z"}],["meta",{"property":"article:tag","content":"主线"}],["meta",{"property":"article:published_time","content":"2025-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-20T15:35:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【Raymond-OS】Chapter 1. MBR的加载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-20T15:35:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond\\",\\"url\\":\\"https://avatars.githubusercontent.com/theflyingraymond\\"}]}"]]},"headers":[{"level":2,"title":"一、过程分析","slug":"一、过程分析","link":"#一、过程分析","children":[]},{"level":2,"title":"二、核心代码","slug":"二、核心代码","link":"#二、核心代码","children":[]},{"level":2,"title":"三、相关内容","slug":"三、相关内容","link":"#三、相关内容","children":[{"level":3,"title":"3.1  相关工具介绍","slug":"_3-1-相关工具介绍","link":"#_3-1-相关工具介绍","children":[]},{"level":3,"title":"3.2  实模式下的内存布局及机器启动后的固定流程","slug":"_3-2-实模式下的内存布局及机器启动后的固定流程","link":"#_3-2-实模式下的内存布局及机器启动后的固定流程","children":[]},{"level":3,"title":"3.3 关于大端序与小端序：","slug":"_3-3-关于大端序与小端序","link":"#_3-3-关于大端序与小端序","children":[]},{"level":3,"title":"3.4 实模式下寄存器介绍","slug":"_3-4-实模式下寄存器介绍","link":"#_3-4-实模式下寄存器介绍","children":[]}]}],"git":{"createdTime":1735716579000,"updatedTime":1737387330000,"contributors":[{"name":"Raymond","username":"Raymond","email":"suncheng11@meituan.com","commits":1,"url":"https://github.com/Raymond"},{"name":"suncheng11","username":"suncheng11","email":"suncheng11@meituan.com","commits":3,"url":"https://github.com/suncheng11"}]},"readingTime":{"minutes":5.37,"words":1612},"filePathRelative":"posts/rd/os/os-cp1.md","localizedDate":"2025年1月20日","excerpt":"\\n<p>MBR的加载</p>\\n","autoDesc":true}');export{c as comp,o as data};
